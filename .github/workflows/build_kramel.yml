name: Build

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - 'master'

jobs:
  build_not:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target: [r8q]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          sudo apt update
          DEBIAN_FRONTEND=noninteractive sudo apt install -yq \
            attr ccache clang golang libbrotli-dev \
            libgtest-dev libprotobuf-dev libunwind-dev libusb-1.0-0-dev libzstd-dev \
            linux-modules-extra-$(uname -r) build-essential lld ninja-build protobuf-compiler zipalign gcc-aarch64-linux-gnu libc6-dev libarchive-tools
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Fetch Neutron Clang and Patch glibc
        run: |
          export KERNEL_DIR="$(pwd)"
          mkdir -p "$HOME/toolchains/neutron-clang"; cd "$HOME/toolchains/neutron-clang"
          curl -LO "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman"; chmod +x antman; ./antman -S; ./antman --patch=glibc
          cd "$KERNEL_DIR"

      - name: Build Kernel
        run: |
          export ARCH=arm64
          BUILD_CROSS_COMPILE=/usr/bin/aarch64-linux-android-
          KERNEL_LLVM_BIN=$(pwd)/toolchain/llvm-arm-toolchain-ship/10.0/bin/clang
          CLANG_TRIPLE=aarch64-linux-gnu-
          KERNEL_MAKE_ENV="DTC_EXT=$(pwd)/tools/dtc CONFIG_BUILD_ARM64_DT_OVERLAY=y"
          make -j64 -C $(pwd) O=$(pwd)/out $KERNEL_MAKE_ENV ARCH=arm64 CROSS_COMPILE=$BUILD_CROSS_COMPILE REAL_CC=$KERNEL_LLVM_BIN CLANG_TRIPLE=$CLANG_TRIPLE CONFIG_SECTION_MISMATCH_WARN_ONLY=y not_defconfig
          make -j64 -C $(pwd) O=$(pwd)/out $KERNEL_MAKE_ENV ARCH=arm64 CROSS_COMPILE=$BUILD_CROSS_COMPILE REAL_CC=$KERNEL_LLVM_BIN CLANG_TRIPLE=$CLANG_TRIPLE CONFIG_SECTION_MISMATCH_WARN_ONLY=y dtbs
          make -j64 -C $(pwd) O=$(pwd)/out $KERNEL_MAKE_ENV ARCH=arm64 CROSS_COMPILE=$BUILD_CROSS_COMPILE REAL_CC=$KERNEL_LLVM_BIN CLANG_TRIPLE=$CLANG_TRIPLE CONFIG_SECTION_MISMATCH_WARN_ONLY=y Image
          cp out/arch/arm64/boot/Image $(pwd)/arch/arm64/boot/Image
          cp ./AnyKernel3/zip* ./

      - name: Date
        id: format_date
        run: echo "time=$(date +'%Y-%m-%d %T %Z')" >> $GITHUB_ENV

      - name: Publish to GitHub
        id: release
        uses: softprops/action-gh-release@v1
        with:
          files: not*
          name: not-CI_${{ github.run_number }}
          tag_name: ${{ github.run_number }}
          body: |
            **Release Notes -** **notKernel**

            - **Kernel Version:** 4.19.325
            - **Release Date:** ${{ steps.format_date.outputs.time }}
            - **Run Number:** ${{ github.run_number }}

            :rocket: *bombed by GitHub Actions.*
        env:
          GITHUB_TOKEN: ${{ secrets.TEST }}

      - uses: actions/upload-artifact@v4
        with:
          name: not-CI_${{ github.run_number }}-${{ matrix.target }}-artifacts
          path: |
            ./not*.zip
            out/arch/arm64/boot/Image
          compression-level: 0
